/* Generated by restful-react */

import React from 'react'
import {
  Get,
  GetProps,
  useGet,
  UseGetProps,
  Mutate,
  MutateProps,
  useMutate,
  UseMutateProps,
} from 'restful-react'
export const SPEC_VERSION = '0.0.0'

export type GetAllBooksResponse = {
  books: {
    /**
     * Currently the filename
     */
    id: string
    title: string
    author: string
    year: number
    publisher: string
    onSale: boolean
    category: 'Comedy' | 'Horror' | 'Romance' | 'Thriller'
  }[]
}

export interface GetAllBooksPathParams {
  year: string
}

export type GetAllBooksProps = Omit<
  GetProps<
    GetAllBooksResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    GetAllBooksPathParams
  >,
  'path'
> &
  GetAllBooksPathParams

export const GetAllBooks = ({ year, ...props }: GetAllBooksProps) => (
  <Get<
    GetAllBooksResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    GetAllBooksPathParams
  >
    path={`/${year}/book/`}
    {...props}
  />
)

export type UseGetAllBooksProps = Omit<
  UseGetProps<
    GetAllBooksResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    GetAllBooksPathParams
  >,
  'path'
> &
  GetAllBooksPathParams

export const useGetAllBooks = ({ year, ...props }: UseGetAllBooksProps) =>
  useGet<
    GetAllBooksResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    GetAllBooksPathParams
  >((paramsInPath: GetAllBooksPathParams) => `/${paramsInPath.year}/book/`, {
    pathParams: { year },
    ...props,
  })

export interface CreateBookResponse {
  done: boolean
}

export interface CreateBookPathParams {
  year: string
}

export type CreateBookProps = Omit<
  MutateProps<
    CreateBookResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    CreateBookPathParams
  >,
  'path' | 'verb'
> &
  CreateBookPathParams

export const CreateBook = ({ year, ...props }: CreateBookProps) => (
  <Mutate<
    CreateBookResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    CreateBookPathParams
  >
    verb="POST"
    path={`/${year}/book/`}
    {...props}
  />
)

export type UseCreateBookProps = Omit<
  UseMutateProps<
    CreateBookResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    CreateBookPathParams
  >,
  'path' | 'verb'
> &
  CreateBookPathParams

export const useCreateBook = ({ year, ...props }: UseCreateBookProps) =>
  useMutate<
    CreateBookResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    CreateBookPathParams
  >('POST', (paramsInPath: CreateBookPathParams) => `/${paramsInPath.year}/book/`, {
    pathParams: { year },
    ...props,
  })

export interface UpdateBookResponse {
  done: boolean
}

export interface UpdateBookPathParams {
  year: string
  book: string
}

export type UpdateBookProps = Omit<
  MutateProps<
    UpdateBookResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    UpdateBookPathParams
  >,
  'path' | 'verb'
> &
  UpdateBookPathParams

export const UpdateBook = ({ year, book, ...props }: UpdateBookProps) => (
  <Mutate<
    UpdateBookResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    UpdateBookPathParams
  >
    verb="PUT"
    path={`/${year}/book/${book}`}
    {...props}
  />
)

export type UseUpdateBookProps = Omit<
  UseMutateProps<
    UpdateBookResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    UpdateBookPathParams
  >,
  'path' | 'verb'
> &
  UpdateBookPathParams

export const useUpdateBook = ({ year, book, ...props }: UseUpdateBookProps) =>
  useMutate<
    UpdateBookResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    UpdateBookPathParams
  >(
    'PUT',
    (paramsInPath: UpdateBookPathParams) => `/${paramsInPath.year}/book/${paramsInPath.book}`,
    { pathParams: { year, book }, ...props }
  )

export interface DeleteBookResponse {
  done: boolean
}

export interface DeleteBookPathParams {
  year: string
}

export type DeleteBookProps = Omit<
  MutateProps<
    DeleteBookResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    string,
    DeleteBookPathParams
  >,
  'path' | 'verb'
> &
  DeleteBookPathParams

export const DeleteBook = ({ year, ...props }: DeleteBookProps) => (
  <Mutate<
    DeleteBookResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    string,
    DeleteBookPathParams
  >
    verb="DELETE"
    path={`/${year}/book`}
    {...props}
  />
)

export type UseDeleteBookProps = Omit<
  UseMutateProps<
    DeleteBookResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    string,
    DeleteBookPathParams
  >,
  'path' | 'verb'
> &
  DeleteBookPathParams

export const useDeleteBook = ({ year, ...props }: UseDeleteBookProps) =>
  useMutate<
    DeleteBookResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    string,
    DeleteBookPathParams
  >('DELETE', (paramsInPath: DeleteBookPathParams) => `/${paramsInPath.year}/book`, {
    pathParams: { year },
    ...props,
  })

export type GetAllWinesResponse = {
  wines: {
    /**
     * Currently the filename
     */
    id: string
    title: string
    description: string
    year: number
    category:
      | 'Châteauneuf-du-Pape (red)'
      | 'Merlot (medium bodied red)'
      | 'Riesling (white)'
      | 'Sangiovese (rosé)'
  }[]
}

export interface GetAllWinesPathParams {
  year: string
}

export type GetAllWinesProps = Omit<
  GetProps<
    GetAllWinesResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    GetAllWinesPathParams
  >,
  'path'
> &
  GetAllWinesPathParams

export const GetAllWines = ({ year, ...props }: GetAllWinesProps) => (
  <Get<
    GetAllWinesResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    GetAllWinesPathParams
  >
    path={`/${year}/wine/`}
    {...props}
  />
)

export type UseGetAllWinesProps = Omit<
  UseGetProps<
    GetAllWinesResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    GetAllWinesPathParams
  >,
  'path'
> &
  GetAllWinesPathParams

export const useGetAllWines = ({ year, ...props }: UseGetAllWinesProps) =>
  useGet<
    GetAllWinesResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    GetAllWinesPathParams
  >((paramsInPath: GetAllWinesPathParams) => `/${paramsInPath.year}/wine/`, {
    pathParams: { year },
    ...props,
  })

export interface CreateWineResponse {
  done: boolean
}

export interface CreateWinePathParams {
  year: string
}

export type CreateWineProps = Omit<
  MutateProps<
    CreateWineResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    CreateWinePathParams
  >,
  'path' | 'verb'
> &
  CreateWinePathParams

export const CreateWine = ({ year, ...props }: CreateWineProps) => (
  <Mutate<
    CreateWineResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    CreateWinePathParams
  >
    verb="POST"
    path={`/${year}/wine/`}
    {...props}
  />
)

export type UseCreateWineProps = Omit<
  UseMutateProps<
    CreateWineResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    CreateWinePathParams
  >,
  'path' | 'verb'
> &
  CreateWinePathParams

export const useCreateWine = ({ year, ...props }: UseCreateWineProps) =>
  useMutate<
    CreateWineResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    CreateWinePathParams
  >('POST', (paramsInPath: CreateWinePathParams) => `/${paramsInPath.year}/wine/`, {
    pathParams: { year },
    ...props,
  })

export interface UpdateWineResponse {
  done: boolean
}

export interface UpdateWinePathParams {
  year: string
  wine: string
}

export type UpdateWineProps = Omit<
  MutateProps<
    UpdateWineResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    UpdateWinePathParams
  >,
  'path' | 'verb'
> &
  UpdateWinePathParams

export const UpdateWine = ({ year, wine, ...props }: UpdateWineProps) => (
  <Mutate<
    UpdateWineResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    UpdateWinePathParams
  >
    verb="PUT"
    path={`/${year}/wine/${wine}`}
    {...props}
  />
)

export type UseUpdateWineProps = Omit<
  UseMutateProps<
    UpdateWineResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    UpdateWinePathParams
  >,
  'path' | 'verb'
> &
  UpdateWinePathParams

export const useUpdateWine = ({ year, wine, ...props }: UseUpdateWineProps) =>
  useMutate<
    UpdateWineResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    UpdateWinePathParams
  >(
    'PUT',
    (paramsInPath: UpdateWinePathParams) => `/${paramsInPath.year}/wine/${paramsInPath.wine}`,
    { pathParams: { year, wine }, ...props }
  )

export interface DeleteWineResponse {
  done: boolean
}

export interface DeleteWinePathParams {
  year: string
}

export type DeleteWineProps = Omit<
  MutateProps<
    DeleteWineResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    string,
    DeleteWinePathParams
  >,
  'path' | 'verb'
> &
  DeleteWinePathParams

export const DeleteWine = ({ year, ...props }: DeleteWineProps) => (
  <Mutate<
    DeleteWineResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    string,
    DeleteWinePathParams
  >
    verb="DELETE"
    path={`/${year}/wine`}
    {...props}
  />
)

export type UseDeleteWineProps = Omit<
  UseMutateProps<
    DeleteWineResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    string,
    DeleteWinePathParams
  >,
  'path' | 'verb'
> &
  DeleteWinePathParams

export const useDeleteWine = ({ year, ...props }: UseDeleteWineProps) =>
  useMutate<
    DeleteWineResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    string,
    DeleteWinePathParams
  >('DELETE', (paramsInPath: DeleteWinePathParams) => `/${paramsInPath.year}/wine`, {
    pathParams: { year },
    ...props,
  })

export type GetAllBeersResponse = {
  beers: {
    /**
     * Currently the filename
     */
    id: string
    title: string
    brewery: string
    year: number
    category: 'Double India Pale Ale' | 'India Pale Ale' | 'Porter' | 'Stout'
  }[]
}

export interface GetAllBeersPathParams {
  year: string
}

export type GetAllBeersProps = Omit<
  GetProps<
    GetAllBeersResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    GetAllBeersPathParams
  >,
  'path'
> &
  GetAllBeersPathParams

export const GetAllBeers = ({ year, ...props }: GetAllBeersProps) => (
  <Get<
    GetAllBeersResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    GetAllBeersPathParams
  >
    path={`/${year}/beer/`}
    {...props}
  />
)

export type UseGetAllBeersProps = Omit<
  UseGetProps<
    GetAllBeersResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    GetAllBeersPathParams
  >,
  'path'
> &
  GetAllBeersPathParams

export const useGetAllBeers = ({ year, ...props }: UseGetAllBeersProps) =>
  useGet<
    GetAllBeersResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    GetAllBeersPathParams
  >((paramsInPath: GetAllBeersPathParams) => `/${paramsInPath.year}/beer/`, {
    pathParams: { year },
    ...props,
  })

export interface CreateBeerResponse {
  done: boolean
}

export interface CreateBeerPathParams {
  year: string
}

export type CreateBeerProps = Omit<
  MutateProps<
    CreateBeerResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    CreateBeerPathParams
  >,
  'path' | 'verb'
> &
  CreateBeerPathParams

export const CreateBeer = ({ year, ...props }: CreateBeerProps) => (
  <Mutate<
    CreateBeerResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    CreateBeerPathParams
  >
    verb="POST"
    path={`/${year}/beer/`}
    {...props}
  />
)

export type UseCreateBeerProps = Omit<
  UseMutateProps<
    CreateBeerResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    CreateBeerPathParams
  >,
  'path' | 'verb'
> &
  CreateBeerPathParams

export const useCreateBeer = ({ year, ...props }: UseCreateBeerProps) =>
  useMutate<
    CreateBeerResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    CreateBeerPathParams
  >('POST', (paramsInPath: CreateBeerPathParams) => `/${paramsInPath.year}/beer/`, {
    pathParams: { year },
    ...props,
  })

export interface UpdateBeerResponse {
  done: boolean
}

export interface UpdateBeerPathParams {
  year: string
  beer: string
}

export type UpdateBeerProps = Omit<
  MutateProps<
    UpdateBeerResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    UpdateBeerPathParams
  >,
  'path' | 'verb'
> &
  UpdateBeerPathParams

export const UpdateBeer = ({ year, beer, ...props }: UpdateBeerProps) => (
  <Mutate<
    UpdateBeerResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    UpdateBeerPathParams
  >
    verb="PUT"
    path={`/${year}/beer/${beer}`}
    {...props}
  />
)

export type UseUpdateBeerProps = Omit<
  UseMutateProps<
    UpdateBeerResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    UpdateBeerPathParams
  >,
  'path' | 'verb'
> &
  UpdateBeerPathParams

export const useUpdateBeer = ({ year, beer, ...props }: UseUpdateBeerProps) =>
  useMutate<
    UpdateBeerResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    void,
    UpdateBeerPathParams
  >(
    'PUT',
    (paramsInPath: UpdateBeerPathParams) => `/${paramsInPath.year}/beer/${paramsInPath.beer}`,
    { pathParams: { year, beer }, ...props }
  )

export interface DeleteBeerResponse {
  done: boolean
}

export interface DeleteBeerPathParams {
  year: string
}

export type DeleteBeerProps = Omit<
  MutateProps<
    DeleteBeerResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    string,
    DeleteBeerPathParams
  >,
  'path' | 'verb'
> &
  DeleteBeerPathParams

export const DeleteBeer = ({ year, ...props }: DeleteBeerProps) => (
  <Mutate<
    DeleteBeerResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    string,
    DeleteBeerPathParams
  >
    verb="DELETE"
    path={`/${year}/beer`}
    {...props}
  />
)

export type UseDeleteBeerProps = Omit<
  UseMutateProps<
    DeleteBeerResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    string,
    DeleteBeerPathParams
  >,
  'path' | 'verb'
> &
  DeleteBeerPathParams

export const useDeleteBeer = ({ year, ...props }: UseDeleteBeerProps) =>
  useMutate<
    DeleteBeerResponse,
    {
      errorMessage: string
      errorCode:
        | 'BAD_REQUEST'
        | 'CONFLICTING_RESOURCE'
        | 'EMAIL_IS_MALFORMED'
        | 'FORBIDDEN'
        | 'INCORRECT_AUTH_HEADERS'
        | 'INTERNAL_SERVER_ERROR'
        | 'INVALID_FORMAT'
        | 'INVALID_JWT'
        | 'MISSING_CLIENT_NAME'
        | 'ROUTE_NOT_FOUND'
        | 'UNAUTHORIZED'
        | 'UNAUTHORIZED_SERVICE'
    },
    void,
    string,
    DeleteBeerPathParams
  >('DELETE', (paramsInPath: DeleteBeerPathParams) => `/${paramsInPath.year}/beer`, {
    pathParams: { year },
    ...props,
  })
